//8kyu Find Multiples of a Number
function findMultiples(integer, limit) {
  let resultSet = []
  for (let i = 1; i <= limit/integer; i++) {
    resultSet.push(integer * i)
  }
  return resultSet
}
console.log(findMultiples(5, 25), [5, 10, 15, 20, 25])
console.log(findMultiples(1, 2), [1, 2])
console.log(findMultiples(5, 7), [5])
console.log(findMultiples(4, 27), [4, 8, 12, 16, 20, 24])
console.log(findMultiples(11, 54), [11, 22, 33, 44])

//7kyu Jaden Casing Strings
String.prototype.toJadenCase = function () {
  return this.split(' ').map(element => `${element[0].toUpperCase()}${element.slice(1)}`).join(' ')
};
let str = "How can mirrors be real if our eyes aren't real";
console.log(str.toJadenCase(), "How Can Mirrors Be Real If Our Eyes Aren't Real");

//7kyu Find the capitals
var capitals = function (word) {
    const uppercaseWord = word.toUpperCase()
    const listArray = []
    for (let i = 0; i <= word.length-1; i++) {
        word[i] === uppercaseWord[i] ? listArray.push(i) : 0
    }
    return listArray
};

console.log(capitals('CodEWaRs'), [0,3,4,6] );

//7kyu The highest profit wins!
function minMax(arr){
    const resArr = [0,0]
    arr.sort((a,b) => a-b)
    resArr[0] = arr[0]
    resArr[1] = arr[arr.length-1]
    return resArr
    //return [Math.min(...arr), Math.max(...arr)]
}

console.log(minMax([1, 2, 3, 4, 5]), [1, 5]);
console.log(minMax([2334454, 5]), [5, 2334454]);
console.log(minMax([5]), [5, 5]);

//8kyu Determine offspring sex based on genes XX and XY chromosomes
function chromosomeCheck(sperm) {
  return sperm[1] === 'Y' ? "Congratulations! You're going to have a son." : "Congratulations! You're going to have a daughter."
}
console.log(chromosomeCheck('XY'), "Congratulations! You're going to have a son.")
console.log(chromosomeCheck('XX'), "Congratulations! You're going to have a daughter.")

//8kyu Training JS #4: Basic data types--Array
function getLength(arr){
  //return length of arr
  return arr.length
}
function getFirst(arr){
  //return the first element of arr
  return arr[0]
}
function getLast(arr){
  //return the last element of arr
  return arr[arr.length-1]
}
function pushElement(arr){
  let el=1;
  //push el to arr
  arr.push(el)
  return arr
}
function popElement(arr){
  //pop an element from arr
  arr.pop()
  return arr
}

console.log(getLength([1,2,3]),3);
console.log(getFirst([1,2,3]),1);
console.log(getLast([1,2,3]),3);
console.log(pushElement([1,2,3]).length,4);
console.log(popElement([1,2,3]).length,2);

//8kyu Grasshopper - Personalized Message
function greet (name, owner) {
  return name === owner ? 'Hello boss' : 'Hello guest'
}

console.log(greet('Daniel', 'Daniel'), 'Hello boss')
console.log(greet('Greg', 'Daniel'), 'Hello guest')

//8kyu Is it even?
function testEven(n) {
  return n % 2 === 0
}

console.log(testEven(0), true, "testEven for 0");
console.log(testEven(0.5), false, "testEven for 0.5");
console.log(testEven(1), false, "testEven for 1");
console.log(testEven(2), true, "testEven for 2");
console.log(testEven(-4), true, "testEven for 2");

//8kyu 5 without numbers
function unusualFive() {
  return 'fives'.length
}

console.log(unusualFive(), 5);

//6kyu Give me a Diamond
function diamond(n){
  let diamondStr = null
  let diamondArr = []
  let spaces = 0
  const centerDiamond = Math.ceil(n/2)

  if (n % 2 > 0) {
  
    diamondArr.push("*".repeat(n))
    for (let i = Math.floor(n/2); i >= 1; i--) {
      spaces = centerDiamond - i
      diamondArr.push(' '.repeat(spaces) + '*'.repeat(n-(spaces * 2)))
      diamondArr.unshift(' '.repeat(spaces) + '*'.repeat(n-(spaces * 2)))
    }
    diamondStr = diamondArr.join("\n") + "\n"
  }

  return diamondStr;
}

console.log(diamond(1), "*\n")
console.log(diamond(3), " *\n***\n *\n")
console.log(diamond(5), "  *\n ***\n*****\n ***\n  *\n")

//6kyu Persistent Bugger.
function persistence(num) {
  let persistenceNum = 0
  let numToString = ''
  let newMultPers = 1
  
  //Only if is a number and the number is positive
  if (typeof(num) == "number" && num >= 0) {
    numToString = num.toString()
    while (numToString.length > 1) {
      for (let i = 0; i < numToString.length; i++) {
        newMultPers = newMultPers * numToString[i]
      }
      persistenceNum += 1
      numToString = newMultPers.toString()
      newMultPers = 1
    }
  }
  return persistenceNum
}

console.log(persistence(39),3);
console.log(persistence(4),0);
console.log(persistence(25),2);
console.log(persistence(999),4);

//6kyu Multiplication table
multiplicationTable = function(size) {
  const tableArray = []
  let columnsArray = []
  
  //iterate rows
  for (let i = 1; i <= size; i++) {
    columnsArray = []
    //iterate columns
    for (j = 1; j <= size; j++) {
      columnsArray.push(j * i)
    }
    tableArray.push(columnsArray)
  }
  return tableArray
}

console.log(multiplicationTable(3), [[1,2,3], [2,4,6], [3,6,9]]);

//8kyu
function multipleOfIndex(array) {
  const resultArray = []
  for (let i = 0; i < array.length; i++) {
    i === 0 && array[i] === 0 ? resultArray.push(0) :
    array[i] % i === 0 ? resultArray.push(array[i]) : 0
  }
  return resultArray
}

console.log(multipleOfIndex([22, -6, 32, 82, 9, 25]), [-6, 32, 25])
console.log(multipleOfIndex([68, -1, 1, -7, 10, 10]), [-1, 10])
console.log(multipleOfIndex([11, -11]), [-11])
console.log(multipleOfIndex([-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68]), [-85, 72, 0, 68])
console.log(multipleOfIndex([28,38,-44,-99,-13,-54,77,-51]), [38, -44, -99])
console.log(multipleOfIndex([-1,-49,-1,67,8,-60,39,35]), [-49, 8, -60, 35])
console.log(multipleOfIndex([0, 2, 3, 6, 9]), [0, 2, 6])

//8kyu A wolf in sheep's clothing
function warnTheSheep(queue) {
	const indexFound = queue.reverse().findIndex(el => el === "wolf")
	return indexFound === 0 ? "Pls go away and stop eating my sheep" : `Oi! Sheep number ${indexFound}! You are about to be eaten by a wolf!`
}

console.log(warnTheSheep(["sheep", "sheep", "sheep", "sheep", "sheep", "wolf", "sheep", "sheep"],
"Oi! Sheep number 2! You are about to be eaten by a wolf!"
))
console.log(warnTheSheep(["sheep", "wolf", "sheep", "sheep", "sheep", "sheep", "sheep"],
"Oi! Sheep number 5! You are about to be eaten by a wolf!"
))
console.log(warnTheSheep(["wolf", "sheep", "sheep", "sheep", "sheep", "sheep", "sheep"],
"Oi! Sheep number 6! You are about to be eaten by a wolf!"
))
console.log(warnTheSheep(["sheep", "wolf", "sheep"],
"Oi! Sheep number 1! You are about to be eaten by a wolf!"
))
console.log(warnTheSheep(["wolf"],
"Pls go away and stop eating my sheep"
))
console.log(warnTheSheep(["sheep", "sheep", "wolf"],
"Pls go away and stop eating my sheep"))

//8kyu How many lightsabers do you own?
function howManyLightsabersDoYouOwn(name = 'Prius') {
  return name === 'Zach' ? 18 : 0
}

console.log( howManyLightsabersDoYouOwn(), 0 )
console.log( howManyLightsabersDoYouOwn("Adam"), 0 )
console.log( howManyLightsabersDoYouOwn("Zach"), 18 )

//5kyu Rot13
function rot13(message){
  let result = "";
  for (let i = 0; i < message.length; i++) {
    const char = message[i];
    if (/[A-Za-z]/.test(char)) {
      // Determine the base offset based on the character case
      const baseOffset = char >= 'A' && char <= 'Z' ? 'A'.charCodeAt(0) : 'a'.charCodeAt(0);
      // Calculate the ROT13 value and wrap around the alphabet
      const rotatedChar = String.fromCharCode((char.charCodeAt(0) - baseOffset + 13) % 26 + baseOffset);
      result += rotatedChar;
    } else {
      result += char; // Non-alphabetic characters are appended as they are
    }
  }
  return result;
}

console.log(rot13("test"), "grfg", `Test failed with messsage = '${"test"}'`);
console.log(rot13("Test"), "Grfg", `Test failed with messsage = '${"Test"}'`);

//8kyu Enumerable Magic - Does My List Include This?
function include(arr, item){
  return arr.includes(item)
}

console.log(include([1,2,3,4], 3), true )
console.log(include([1,2,4,5], 3), false)
console.log(include([], 3),        false)